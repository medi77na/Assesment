// <auto-generated />
using System;
using Assesment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Assesment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241115155624_CreationAppointmentsSeeder")]
    partial class CreationAppointmentsSeeder
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Assesment.Models.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comments")
                        .HasColumnType("longtext")
                        .HasColumnName("comments");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date")
                        .HasColumnName("date");

                    b.Property<int>("IdDoctor")
                        .HasColumnType("int")
                        .HasColumnName("id_doctor");

                    b.Property<int>("IdPatient")
                        .HasColumnType("int")
                        .HasColumnName("id_patient");

                    b.Property<int>("IdSpecialty")
                        .HasColumnType("int")
                        .HasColumnName("id_specialty");

                    b.Property<string>("ReasonConsultation")
                        .HasColumnType("longtext")
                        .HasColumnName("reason_for_consultation");

                    b.Property<bool>("Status")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("status");

                    b.Property<TimeOnly>("Time")
                        .HasColumnType("time(6)")
                        .HasColumnName("time");

                    b.HasKey("Id");

                    b.HasIndex("IdDoctor");

                    b.HasIndex("IdPatient");

                    b.HasIndex("IdSpecialty");

                    b.ToTable("appointments");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Comments = "Patient requested a general health check-up.",
                            Date = new DateOnly(2024, 12, 5),
                            IdDoctor = 1,
                            IdPatient = 5,
                            IdSpecialty = 1,
                            ReasonConsultation = "Routine check-up",
                            Status = true,
                            Time = new TimeOnly(10, 30, 0)
                        },
                        new
                        {
                            Id = 2,
                            Comments = "Patient reports chronic knee pain over the past month.",
                            Date = new DateOnly(2024, 12, 6),
                            IdDoctor = 2,
                            IdPatient = 6,
                            IdSpecialty = 3,
                            ReasonConsultation = "Knee pain",
                            Status = true,
                            Time = new TimeOnly(15, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            Comments = "Appointment cancelled by the patient.",
                            Date = new DateOnly(2024, 12, 7),
                            IdDoctor = 3,
                            IdPatient = 7,
                            IdSpecialty = 2,
                            ReasonConsultation = "Skin rash",
                            Status = false,
                            Time = new TimeOnly(11, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            Comments = "Patient experiences discomfort while sitting for long hours.",
                            Date = new DateOnly(2024, 12, 8),
                            IdDoctor = 4,
                            IdPatient = 8,
                            IdSpecialty = 4,
                            ReasonConsultation = "Back pain",
                            Status = true,
                            Time = new TimeOnly(9, 0, 0)
                        });
                });

            modelBuilder.Entity("Assesment.Models.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("IdPerson")
                        .HasColumnType("int")
                        .HasColumnName("id_person");

                    b.Property<int>("IdShedule")
                        .HasColumnType("int")
                        .HasColumnName("id_shedule");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.HasIndex("IdShedule");

                    b.ToTable("doctors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IdPerson = 1,
                            IdShedule = 1
                        },
                        new
                        {
                            Id = 2,
                            IdPerson = 2,
                            IdShedule = 2
                        },
                        new
                        {
                            Id = 3,
                            IdPerson = 3,
                            IdShedule = 3
                        },
                        new
                        {
                            Id = 4,
                            IdPerson = 4,
                            IdShedule = 4
                        });
                });

            modelBuilder.Entity("Assesment.Models.Patient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Allergies")
                        .HasColumnType("longtext")
                        .HasColumnName("allergies");

                    b.Property<double>("Height")
                        .HasColumnType("double")
                        .HasColumnName("height");

                    b.Property<int>("IdPerson")
                        .HasColumnType("int")
                        .HasColumnName("id_person");

                    b.Property<double>("Weight")
                        .HasColumnType("double")
                        .HasColumnName("weight");

                    b.HasKey("Id");

                    b.HasIndex("IdPerson");

                    b.ToTable("patients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Allergies = "Pollen",
                            Height = 1.75,
                            IdPerson = 5,
                            Weight = 70.5
                        },
                        new
                        {
                            Id = 2,
                            Allergies = "None",
                            Height = 1.8,
                            IdPerson = 6,
                            Weight = 82.299999999999997
                        },
                        new
                        {
                            Id = 3,
                            Allergies = "Peanuts",
                            Height = 1.6799999999999999,
                            IdPerson = 7,
                            Weight = 65.0
                        },
                        new
                        {
                            Id = 4,
                            Allergies = "Dust",
                            Height = 1.8500000000000001,
                            IdPerson = 8,
                            Weight = 90.700000000000003
                        });
                });

            modelBuilder.Entity("Assesment.Models.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date")
                        .HasColumnName("date_birth");

                    b.Property<int>("DocumentNumber")
                        .HasColumnType("int")
                        .HasColumnName("document_number");

                    b.Property<string>("Email")
                        .HasColumnType("longtext")
                        .HasColumnName("email");

                    b.Property<int>("IdRole")
                        .HasColumnType("int")
                        .HasColumnName("id_role");

                    b.Property<string>("LastName")
                        .HasColumnType("longtext")
                        .HasColumnName("last_name");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("longtext")
                        .HasColumnName("password");

                    b.Property<int>("PhoneNumber")
                        .HasColumnType("int")
                        .HasColumnName("phone_number");

                    b.HasKey("Id");

                    b.HasIndex("IdRole");

                    b.ToTable("persons");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateBirth = new DateOnly(1990, 5, 20),
                            DocumentNumber = 12345678,
                            Email = "john.doe@example.com",
                            IdRole = 2,
                            LastName = "Doe",
                            Name = "John",
                            Password = "hashedpassword1",
                            PhoneNumber = 987654321
                        },
                        new
                        {
                            Id = 2,
                            DateBirth = new DateOnly(1985, 11, 15),
                            DocumentNumber = 87654321,
                            Email = "jane.smith@example.com",
                            IdRole = 2,
                            LastName = "Smith",
                            Name = "Jane",
                            Password = "hashedpassword2",
                            PhoneNumber = 912345678
                        },
                        new
                        {
                            Id = 3,
                            DateBirth = new DateOnly(1995, 7, 10),
                            DocumentNumber = 12312312,
                            Email = "alice.johnson@example.com",
                            IdRole = 2,
                            LastName = "Johnson",
                            Name = "Alice",
                            Password = "hashedpassword3",
                            PhoneNumber = 998877665
                        },
                        new
                        {
                            Id = 4,
                            DateBirth = new DateOnly(1988, 3, 25),
                            DocumentNumber = 45645645,
                            Email = "bob.brown@example.com",
                            IdRole = 2,
                            LastName = "Brown",
                            Name = "Bob",
                            Password = "hashedpassword4",
                            PhoneNumber = 987123456
                        },
                        new
                        {
                            Id = 5,
                            DateBirth = new DateOnly(1992, 9, 5),
                            DocumentNumber = 78978978,
                            Email = "charlie.davis@example.com",
                            IdRole = 3,
                            LastName = "Davis",
                            Name = "Charlie",
                            Password = "hashedpassword5",
                            PhoneNumber = 976543210
                        },
                        new
                        {
                            Id = 6,
                            DateBirth = new DateOnly(1993, 2, 18),
                            DocumentNumber = 65432123,
                            Email = "emily.wilson@example.com",
                            IdRole = 3,
                            LastName = "Wilson",
                            Name = "Emily",
                            Password = "hashedpassword6",
                            PhoneNumber = 965874123
                        },
                        new
                        {
                            Id = 7,
                            DateBirth = new DateOnly(1987, 4, 12),
                            DocumentNumber = 11223344,
                            Email = "daniel.taylor@example.com",
                            IdRole = 3,
                            LastName = "Taylor",
                            Name = "Daniel",
                            Password = "hashedpassword7",
                            PhoneNumber = 914578965
                        },
                        new
                        {
                            Id = 8,
                            DateBirth = new DateOnly(1999, 8, 21),
                            DocumentNumber = 55667788,
                            Email = "sophia.anderson@example.com",
                            IdRole = 3,
                            LastName = "Anderson",
                            Name = "Sophia",
                            Password = "hashedpassword8",
                            PhoneNumber = 987412365
                        },
                        new
                        {
                            Id = 9,
                            DateBirth = new DateOnly(1991, 10, 3),
                            DocumentNumber = 99887766,
                            Email = "michael.thomas@example.com",
                            IdRole = 1,
                            LastName = "Thomas",
                            Name = "Michael",
                            Password = "hashedpassword9",
                            PhoneNumber = 923456789
                        },
                        new
                        {
                            Id = 10,
                            DateBirth = new DateOnly(1996, 12, 29),
                            DocumentNumber = 44332211,
                            Email = "olivia.harris@example.com",
                            IdRole = 1,
                            LastName = "Harris",
                            Name = "Olivia",
                            Password = "hashedpassword10",
                            PhoneNumber = 965432198
                        });
                });

            modelBuilder.Entity("Assesment.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Administrator"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Patient"
                        });
                });

            modelBuilder.Entity("Assesment.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<TimeOnly>("EndTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("end_time");

                    b.Property<DateOnly>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<TimeOnly>("StartTime")
                        .HasColumnType("time(6)")
                        .HasColumnName("start_time");

                    b.HasKey("Id");

                    b.ToTable("shedules");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EndDate = new DateOnly(2024, 11, 30),
                            EndTime = new TimeOnly(14, 0, 0),
                            StartDate = new DateOnly(2024, 11, 20),
                            StartTime = new TimeOnly(8, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            EndDate = new DateOnly(2024, 12, 5),
                            EndTime = new TimeOnly(20, 0, 0),
                            StartDate = new DateOnly(2024, 11, 20),
                            StartTime = new TimeOnly(14, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            EndDate = new DateOnly(2024, 11, 28),
                            EndTime = new TimeOnly(17, 0, 0),
                            StartDate = new DateOnly(2024, 11, 22),
                            StartTime = new TimeOnly(9, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            EndDate = new DateOnly(2024, 12, 1),
                            EndTime = new TimeOnly(16, 0, 0),
                            StartDate = new DateOnly(2024, 11, 25),
                            StartTime = new TimeOnly(10, 0, 0)
                        },
                        new
                        {
                            Id = 5,
                            EndDate = new DateOnly(2024, 12, 10),
                            EndTime = new TimeOnly(13, 0, 0),
                            StartDate = new DateOnly(2024, 11, 27),
                            StartTime = new TimeOnly(7, 0, 0)
                        },
                        new
                        {
                            Id = 6,
                            EndDate = new DateOnly(2024, 12, 15),
                            EndTime = new TimeOnly(18, 0, 0),
                            StartDate = new DateOnly(2024, 12, 1),
                            StartTime = new TimeOnly(12, 0, 0)
                        });
                });

            modelBuilder.Entity("Assesment.Models.Specialty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("Specialties");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Cardiology"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Pediatrics"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Dermatology"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Neurology"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Orthopedics"
                        });
                });

            modelBuilder.Entity("Assesment.Models.Appointment", b =>
                {
                    b.HasOne("Assesment.Models.Doctor", "Doctor")
                        .WithMany()
                        .HasForeignKey("IdDoctor")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assesment.Models.Patient", "Patient")
                        .WithMany()
                        .HasForeignKey("IdPatient")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assesment.Models.Specialty", "Specialty")
                        .WithMany()
                        .HasForeignKey("IdSpecialty")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");

                    b.Navigation("Patient");

                    b.Navigation("Specialty");
                });

            modelBuilder.Entity("Assesment.Models.Doctor", b =>
                {
                    b.HasOne("Assesment.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Assesment.Models.Schedule", "Schedule")
                        .WithMany()
                        .HasForeignKey("IdShedule")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Assesment.Models.Patient", b =>
                {
                    b.HasOne("Assesment.Models.Person", "Person")
                        .WithMany()
                        .HasForeignKey("IdPerson")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Assesment.Models.Person", b =>
                {
                    b.HasOne("Assesment.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("IdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });
#pragma warning restore 612, 618
        }
    }
}
